environments:
- name: dev
  instanceType: t2.micro
- name: production
service:
  name: muexample
  port: 80
  pathPatterns:
  - /*
  pipeline:
    source:
      provider: GitHub
      repo: tmcelhattan/muexample
    acceptance:
      environment: dev
    production:
      environment: production
      disabled: true

templates:
  mu-service-muexample-dev:
    Resources:
      CloudWatchEventRole:
        Type: "AWS::IAM::Role"
        Properties: 
          AssumeRolePolicyDocument:
            "Statement": [
              {
                "Action": [
                    "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "events.amazonaws.com"
                    ]
                }
              }
            ]
      CloudWatchEventPolicy:
        Type: "AWS::IAM::Policy"
        Properties: 
          PolicyName: "ecs_scheduled_task_policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: ecs:RunTask
                Resource: "*"
          Roles: 
            - Ref: "CloudWatchEventRole"
      TargetControlEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the spec limit rake task every 10 minutes"
          ScheduleExpression: rate(10 minutes)
          State: "ENABLED"
          Targets: 
            - Id: TargetControlEventRuleId
              RoleArn:
                Fn::GetAtt: [ CloudWatchEventRole, Arn ]
              Arn: 
                Fn::Sub:
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}"
                  - EcsClusterName: 'mu-environment-dev'
              Input: '{ "containerOverrides": [ { "name": "specs", "command": [ "echo", "$PATH" ] } ] }'
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Ref: MicroserviceTaskDefinition
      SpecLimitEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the spec limit rake task every 10 minutes"
          ScheduleExpression: rate(10 minutes)
          State: "ENABLED"
          Targets: 
            - Id: SpecLimitEventRuleId
              RoleArn:
                Fn::GetAtt: [ CloudWatchEventRole, Arn ]
              Arn: 
                Fn::Sub:
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}"
                  - EcsClusterName: mu-environment-dev
              Input: '{ "containerOverrides": [ { "name": "targets", "command": [ "echo", "$HOME" ] } ] }'
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Ref: MicroserviceTaskDefinition
  mu-loadbalancer-dev:
    Resources:
      Elb:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
          LoadBalancerAttributes:
            - Key: access_logs.s3.enabled
              Value: true
            - Key: access_logs.s3.bucket
              Value:
                Ref: ElbLogsS3Bucket
            - Key: deletion_protection.enabled
              Value: true 
      ElbLogsS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties: 
          BucketName:
            Fn::Sub:
              - "${AWS::StackName}-ElbLogs"
      ElbS3BucketPolicy:
        SampleBucketPolicy: 
          Type: "AWS::S3::BucketPolicy"
          Properties: 
            Bucket: 
              Ref: ElbLogsS3Bucket
            PolicyDocument: 
              Statement: 
                - 
                  Action: 
                    - "*"
                  Effect: "Allow"
                  Resource: 
                    Fn::Join: 
                      - ""
                      - 
                        - "arn:aws:s3:::"
                        - 
                          Ref: "ElbLogsS3Bucket"
                        - "/*"
                  Principal: "*"
  # mu-vpc-dev:
  #   Resources:
  #     VPCPeeringConnection:
  #       Type: "AWS::EC2::VPCPeeringConnection"
  #       Properties: 
  #         PeerVpcId: vpc-d5451aac
  #         VpcId:
  #           Ref: VPC

