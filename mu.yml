environments:
  - name: dev
    cluster:
      instanceType: t2.medium
      desiredCapacity: 1
      maxSize: 2
      keyName: skyland-tech-access
      sshAllow: 0.0.0.0/0
      imageId: ami-0c8d8877
service:
  name: muexample
  port: 80
  healthEndpoint: /index.html
  pathPatterns: 
  - /*
  pipeline:
    source:
      provider: GitHub
      repo: tmcelhattan/muexample
    build:
      image: aws/codebuild/eb-ruby-2.3-amazonlinux-64:2.1.6
    acceptance:
      image: aws/codebuild/eb-ruby-2.3-amazonlinux-64:2.1.6
      environment: dev
    production:
      environment: pims-prod
      disabled: true

templates:
  mu-vpc-dev:
    Resources:
      VPCPeeringConnection:
        Type: "AWS::EC2::VPCPeeringConnection"
        Properties: 
          PeerVpcId: vpc-d5451aac
          VpcId:
            Ref: VPC
  mu-service-muexample-dev:
    Resources:
      TargetLimitEcsTask:
        Type: "AWS::ECS::TaskDefinition"
        Properties: 
          ExecutionRoleArn:
            Fn::GetAtt: [ EcsTaskRole, Arn ]
          TaskRoleArn: 
            Fn::GetAtt: [ EcsTaskRole, Arn ]
          ContainerDefinitions:
            - Command:
                [ "echo", "$HOME" ]
              Cpu: 10
              MemoryReservation: 1024
              Name: target_control_ecs_task
      SpecLimitEcsTask:
        Type: "AWS::ECS::TaskDefinition"
        Properties: 
          ExecutionRoleArn:
            Fn::GetAtt: [ EcsTaskRole, Arn ]
          TaskRoleArn: 
            Fn::GetAtt: [ EcsTaskRole, Arn ]
          ContainerDefinitions:
            - Command:
                [ "echo", "$PATH" ]
              Cpu: 10
              MemoryReservation: 1024
              Name: spec_limit_ecs_task
      CloudWatchEventRole:
        Type: "AWS::IAM::Role"
        Properties: 
          AssumeRolePolicyDocument:
            "Statement": [
              {
                "Action": [
                    "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "events.amazonaws.com"
                    ]
                }
              }
            ]
      CloudWatchEventPolicy:
        Type: "AWS::IAM::Policy"
        Properties: 
          PolicyName: "ecs_scheduled_task_policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: ecs:RunTask
                Resource: "*"
          Roles: 
            - 
              Ref: "CloudWatchEventRole"
      TargetControlEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the target control limit rake task every 10 minutes"
          ScheduleExpression: "rate(1 minutes)"
          State: "ENABLED"
          RoleArn:
            Ref: CloudWatchEventRole
          Targets:
            - 
              Arn: 
                Fn::GetAtt: [ TargetLimitEcsTask, Arn ]
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Fn::GetAtt: [ MicroserviceTaskDefinition, Arn ]
      SpecLimitEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the spec limit rake task every 10 minutes"
          ScheduleExpression: "rate(1 minutes)"
          State: "ENABLED"
          RoleArn:
            Ref: CloudWatchEventRole
          Targets: 
            - 
              Arn: 
                Fn::GetAtt: [ SpecLimitEcsTask, Arn ]
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Fn::GetAtt: [ MicroserviceTaskDefinition, Arn ]

